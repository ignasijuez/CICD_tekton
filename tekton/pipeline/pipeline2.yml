apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-pipeline
spec:
  description: |
    This pipeline clones a git repo, then builds db and app
  params:
    - name: repo-url
      type: string
      description: The git repo URL to clone from
    - name: image-reference
      type: string
    - name: SONAR_PROJECT_KEY
      type: string
    - name: SONAR_ORGANIZATION
      type: string
  workspaces:
    - name: shared-workspace
      description: |
        This workspace contains the cloned repo files, so they can be read by the next task
    - name: docker-credentials

  tasks:
    - name: checkout
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: $(params.repo-url)
  
    - name: sonar
      runAfter: ["checkout"]
      taskRef:
        name: sonar-task
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.SONAR_PROJECT_KEY)
        - name: SONAR_ORGANIZATION
          value: $(params.SONAR_ORGANIZATION)
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: dependency-check
      runAfter: ["checkout"]
      taskRef:
        name: dependency-check
      params:
        - name: workspacePath
          value: "$(workspaces.output.path)"
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: build-app
      runAfter: ["checkout"]
      taskRef:
        name: maven-build
      params:
          - name: workspacePath
            value: "$(workspaces.output.path)"
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: report-status
      runAfter: ["build-app"]
      taskRef:
        name: report-status
      params:
        - name: stageName
          value: "Maven Build"
        - name: status
          value: "$(tasks.build-app.results.status)"
        - name: details
          value: "$(tasks.build-app.results.details)"
          
    - name: build-push
      runAfter: ["build-app"]
      taskRef:
        name: kaniko
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: dockerconfig
          workspace: docker-credentials
      params:
        - name: IMAGE
          value: $(params.image-reference)

    - name: check-sonar-results
      runAfter: ["build-push"]
      taskRef:
        name: check-sonar-status
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: deploy-mysql
      runAfter: ["check-sonar-results"]
      taskRef:
        name: deploy-mysql
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: deploy-app
      runAfter: ["deploy-mysql"]
      taskRef:
        name: spring-app-deployment-apply
      workspaces:
        - name: output
          workspace: shared-workspace
  
  finally:
    - name: generate-final-report
      taskSpec:
        steps:
          - name: consolidate-report
            image: ubuntu:latest
            script: |
              apt-get update && apt-get install -y curl jq
              # Compilar el reporte final leyendo los archivos del directorio report
              report="{\"tasks\": []}"
              for file in /workspace/output/*-status.txt; do
                task_name=$(basename "$file" -status.txt)
                task_status=$(cat "$file")
                task_details=$(cat "/workspace/output/${task_name}-details.txt")
                report=$(echo "$report" | jq --arg task "$task_name" --arg status "$task_status" --arg details "$task_details" '.tasks += [{"name": $task, "status": $status, "details": $details}]')
              done
              echo "Final Report: $report"
              curl -X POST -H "Content-Type: application/json" -d "$report" https://httpbin.org/post
      workspaces:
        - name: output
          workspace: shared-workspace


    #- name: final-report-status
    #  taskRef:
    #    name: report-status
    #  params:
    #    - name: stageName
    #      value: "Maven Build"
    #    - name: status
    #      value: "$(tasks.build-app.results.status)"
    #    - name: details
    #      value: "$(tasks.build-app.results.details)"
    #- name: notify-completion
    #  taskSpec:
    #    steps:
    #      - name: notify-final-status
    #        image: curlimages/curl
    #        script: |
    #          curl -X POST -H "Content-Type: application/json" \
    #            -d '{"pipeline": "ci-pipeline", "status": "$(tasks.check-out.status)", "details": "Pipeline completed"}' \
    #            https://httpbin.org/post
              